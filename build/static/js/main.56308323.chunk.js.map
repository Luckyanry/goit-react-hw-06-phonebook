{"version":3,"sources":["redux/actions/filterAction.js","redux/constants/filterConstants.js","components/ContactForm/ContactForm.js","redux/actions/contactAction.js","redux/constants/contactConstants.js","components/Filter/Filter.js","components/SingleContact/SingleContact.js","components/ContactList/ContactList.js","components/App/App.js","redux/reducers/contactReducer.js","redux/reducers/index.js","redux/reducers/filterReducer.js","redux/reducers/formReducer.js","redux/constants/formConstants.js","redux/store.js","index.js"],"names":["handleFilter","e","type","payload","target","value","ContactForm","formInitialState","name","number","state","alert","inputHandler","setState","submitHandler","preventDefault","props","contacts","find","contact","toggleAlert","reset","singleContact","id","uuidv4","addContact","status","this","CSSTransition","in","classNames","timeout","unmountOnExit","onEntered","onClick","className","onSubmit","placeholder","onChange","Component","mapDispatchToProps","connect","items","filter","deleteContact","ContactList","filteredContacts","TransitionGroup","component","map","key","App","animation","getFilteredContact","toLowerCase","includes","savedContacts","localStorage","getItem","contactStorage","JSON","parse","prevProps","setItem","stringify","appear","length","arr","initialState","combineReducers","input","action","rootReducer","contactsReducer","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56308323.chunk.js","sourcesContent":["import { QUERY_FILTER } from \"../constants/filterConstants\";\n\nexport const handleFilter = (e) => ({\n  type: QUERY_FILTER,\n  payload: e.target.value,\n});\n","export const QUERY_FILTER = \"@filter/query\";\n","import React, { Component } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport { addContact } from \"../../redux/actions/contactAction\";\nimport PropTypes from \"prop-types\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./ContactForm.css\";\n\nclass ContactForm extends Component {\n  formInitialState = {\n    name: \"\",\n    number: \"\",\n  };\n\n  state = {\n    ...this.formInitialState,\n    alert: false,\n  };\n\n  inputHandler = ({ target }) => {\n    const { value, name } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  submitHandler = (e) => {\n    const { name, number, alert } = this.state;\n    e.preventDefault();\n\n    const { contacts } = this.props;\n    const isExists = contacts.find((contact) => contact.name === name);\n\n    if (isExists) {\n      this.toggleAlert(alert);\n      return this.reset();\n    }\n\n    const singleContact = {\n      name,\n      number,\n      id: uuidv4(),\n    };\n\n    this.props.addContact(singleContact);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ ...this.formInitialState });\n  };\n\n  toggleAlert = (status) => {\n    this.setState({ alert: !status });\n  };\n\n  render() {\n    const { name, number, alert } = this.state;\n    const alertDelay = () => this.setState({ alert: !alert });\n\n    return (\n      <>\n        <CSSTransition\n          in={alert}\n          classNames=\"Alert\"\n          timeout={1500}\n          unmountOnExit\n          onEntered={alertDelay}\n        >\n          <button\n            onClick={this.toggleAlert}\n            className=\"AlertBtn\"\n          >{`Contact already exists!`}</button>\n        </CSSTransition>\n        <form className=\"ContactsForm\" onSubmit={this.submitHandler}>\n          <label className=\"InputName\">\n            Name\n            <br />\n            <input\n              className=\"InputForm\"\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Add name\"\n              value={name}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <br />\n          <label className=\"InputName\">\n            Number\n            <br />\n            <input\n              className=\"InputForm\"\n              type=\"text\"\n              name=\"number\"\n              placeholder=\"Add phone number\"\n              value={number}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <br />\n          <button type=\"submit\" className=\"SubmitBtn\">\n            Create contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n  filter: state.contacts.filter,\n});\n\nconst mapDispatchToProps = {\n  addContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n      namber: PropTypes.string,\n    })\n  ).isRequired,\n  filter: PropTypes.string.isRequired,\n  addContact: PropTypes.func.isRequired,\n};\n","import {\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  CONTAT_STORAGE,\n} from \"../constants/contactConstants\";\n\nexport const addContact = (singleContact) => ({\n  type: ADD_CONTACT,\n  payload: singleContact,\n});\n\nexport const deleteContact = (id) => ({\n  type: DELETE_CONTACT,\n  payload: id,\n});\n\nexport const contactStorage = (arr) => ({\n  type: CONTAT_STORAGE,\n  payload: arr,\n});\n","export const ADD_CONTACT = \"@contacts/add\";\nexport const DELETE_CONTACT = \"@contact/delete\";\nexport const CONTAT_STORAGE = \"@contact/storage\";\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { handleFilter } from \"../../redux/actions/filterAction\";\nimport \"./Filter.css\";\n\nconst Filter = ({ filter, handleFilter }) => {\n  return (\n    <div className=\"FilterBox\">\n      <label className=\"InputLabel\">\n        Find contacts by name\n        <br />\n        <input\n          className=\"FilterForm\"\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Find contact\"\n          value={filter}\n          onChange={handleFilter}\n        />\n      </label>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  filter: state.contacts.filter,\n});\n\nconst mapDispatchToProps = {\n  handleFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.propTypes = {\n  state: PropTypes.shape({\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        id: PropTypes.string,\n        namber: PropTypes.string,\n      })\n    ),\n    filter: PropTypes.string,\n  }).isRequired,\n  handleFilter: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { deleteContact } from \"../../redux/actions/contactAction\";\nimport \"./SingleContact.css\";\n\nconst SingleContact = ({ contact, deleteContact }) => {\n  const { name, id, number } = contact;\n  return (\n    <li className=\"Contact\">\n      <h4>{name}</h4>\n      <p>{number}</p>\n      <button\n        className=\"DelBtn\"\n        type=\"button\"\n        id={id}\n        onClick={() => deleteContact(id)}\n      >\n        &#10008;\n      </button>\n    </li>\n  );\n};\n\nconst mapDispatchToProps = {\n  deleteContact,\n};\n\nexport default connect(null, mapDispatchToProps)(SingleContact);\n\nSingleContact.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.string,\n    namber: PropTypes.string,\n  }).isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\nimport SingleContact from \"../SingleContact/SingleContact\";\nimport \"./ContactList.css\";\n\nconst ContactList = ({ filteredContacts }) => {\n  return (\n    <TransitionGroup component=\"ul\" className=\"ContactList\">\n      {filteredContacts.map((contact, id) => (\n        <CSSTransition key={id} classNames=\"ListItem\" timeout={250}>\n          <SingleContact contact={contact} />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  filteredContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n      namber: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { contactStorage } from \"../../redux/actions/contactAction\";\nimport { handleFilter } from \"../../redux/actions/filterAction\";\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport Filter from \"../Filter/Filter\";\nimport ContactList from \"../ContactList/ContactList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    animation: false,\n  };\n\n  componentDidMount() {\n    this.setState((state) => ({\n      animation: !state.animation,\n    }));\n\n    const savedContacts = localStorage.getItem(\"contacts\");\n    if (savedContacts) {\n      this.props.contactStorage(JSON.parse(savedContacts));\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { contacts } = this.props;\n    if (prevProps.contacts !== contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n    }\n  }\n\n  getFilteredContact = () => {\n    const { contacts, filter } = this.props;\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"Container\">\n        <CSSTransition\n          in={true}\n          appear={true}\n          classNames=\"Title-slideIn\"\n          timeout={500}\n          unmountOnExit\n        >\n          <h1 className=\"AppTitle\">Phonebook</h1>\n        </CSSTransition>\n\n        <ContactForm />\n\n        {this.props.contacts.length === 0 && (\n          <>\n            <h2 className=\"ContactTitle\">Contacts</h2>\n            <p>Contacts list is empty. Please, create new cotnact!</p>\n          </>\n        )}\n\n        <CSSTransition\n          in={this.props.contacts.length > 1}\n          classNames=\"FilterAnimation\"\n          timeout={250}\n          unmountOnExit\n        >\n          <Filter state={this.state} handleFilter={this.handleFilter} />\n        </CSSTransition>\n\n        <ContactList filteredContacts={this.getFilteredContact()} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n  filter: state.contacts.filter,\n});\n\nconst mapDispatchToProps = {\n  contactStorage,\n  handleFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  CONTAT_STORAGE,\n} from \"../constants/contactConstants\";\n\nconst initialState = [];\n\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case ADD_CONTACT:\n      return [...state, payload];\n\n    case DELETE_CONTACT:\n      return state.filter((contact) => contact.id !== payload);\n\n    case CONTAT_STORAGE:\n      return payload;\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport input from \"./formReducer\";\nimport filter from \"./filterReducer\";\nimport items from \"./contactReducer\";\n\nexport default combineReducers({\n  items,\n  filter,\n  input,\n});\n","import { QUERY_FILTER } from \"../constants/filterConstants\";\n\nconst initialeState = \"\";\n\nexport default (state = initialeState, { type, payload }) => {\n  switch (type) {\n    case QUERY_FILTER:\n      return (state = payload);\n\n    default:\n      return state;\n  }\n};\n","import { INPUT_CHANGE, INPUT_RESET } from \"../constants/formConstants\";\n\nconst initialState = \"\";\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case INPUT_CHANGE:\n      return action.payload;\n\n    case INPUT_RESET:\n      return \"\";\n\n    default:\n      return state;\n  }\n};\n","export const INPUT_CHANGE = \"@input/change\";\nexport const INPUT_RESET = \"@input/reset\";\n","import { createStore } from \"redux\";\nimport { combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport contactsReducer from \"./reducers\";\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n});\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App/App\";\nimport store from \"./redux/store\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}