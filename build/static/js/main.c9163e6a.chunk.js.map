{"version":3,"sources":["redux/actions/contactAction.js","redux/constants/contactConstants.js","redux/actions/filterAction.js","redux/constants/filterConstants.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/SingleContact/SingleContact.js","components/ContactList/ContactList.js","components/App/App.js","redux/reducers/filterReducer.js","redux/reducers/contactReducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["addContact","createAction","deleteContact","contactStorage","handleFilter","payload","target","value","ContactForm","formInitialState","name","number","state","alert","inputHandler","setState","submitHandler","e","preventDefault","props","contacts","find","contact","toggleAlert","reset","singleContact","id","uuidv4","status","this","CSSTransition","in","classNames","timeout","unmountOnExit","onEntered","onClick","className","onSubmit","type","placeholder","onChange","Component","mapDispatchToProps","connect","items","filter","ContactList","filteredContacts","TransitionGroup","component","map","key","App","animation","getFilteredContact","toLowerCase","includes","savedContacts","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","appear","length","createReducer","combineReducers","rootReducer","contactsReducer","store","configureStore","reducer","devTools","process","ReactDOM","render","document","getElementById"],"mappings":"oZAOaA,EAAaC,YCPC,iBDQdC,EAAgBD,YCPC,mBDQjBE,EAAiBF,YCPA,oBCCjBG,EAAeH,YCHA,iBDG2B,kBAAiB,CACtEI,QADqD,EAAGC,OACxCC,U,uBEIZC,G,kNACJC,iBAAmB,CACjBC,KAAM,GACNC,OAAQ,I,EAGVC,M,2BACK,EAAKH,kB,IACRI,OAAO,I,EAGTC,aAAe,YAAiB,IAAdR,EAAa,EAAbA,OACRC,EAAgBD,EAAhBC,MAAOG,EAASJ,EAATI,KAEf,EAAKK,SAAL,eACGL,EAAOH,K,EAIZS,cAAgB,SAACC,GAAO,IAAD,EACW,EAAKL,MAA7BF,EADa,EACbA,KAAMC,EADO,EACPA,OAAQE,EADD,EACCA,MAMtB,GALAI,EAAEC,iBAEmB,EAAKC,MAAlBC,SACkBC,MAAK,SAACC,GAAD,OAAaA,EAAQZ,OAASA,KAI3D,OADA,EAAKa,YAAYV,GACV,EAAKW,QAGd,IAAMC,EAAgB,CACpBf,OACAC,SACAe,GAAIC,gBAGN,EAAKR,MAAMnB,WAAWyB,GACtB,EAAKD,S,EAGPA,MAAQ,WACN,EAAKT,SAAL,eAAmB,EAAKN,oB,EAG1Bc,YAAc,SAACK,GACb,EAAKb,SAAS,CAAEF,OAAQe,K,uDAGhB,IAAD,SACyBC,KAAKjB,MAA7BF,EADD,EACCA,KAAMC,EADP,EACOA,OAAQE,EADf,EACeA,MAGtB,OACE,oCACE,kBAACiB,EAAA,EAAD,CACEC,GAAIlB,EACJmB,WAAW,QACXC,QAAS,KACTC,eAAa,EACbC,UATa,kBAAM,EAAKpB,SAAS,CAAEF,OAAQA,MAW3C,4BACEuB,QAASP,KAAKN,YACdc,UAAU,YAFZ,4BAKF,0BAAMA,UAAU,eAAeC,SAAUT,KAAKb,eAC5C,2BAAOqB,UAAU,aAAjB,OAEE,6BACA,2BACEA,UAAU,YACVE,KAAK,OACL7B,KAAK,OACL8B,YAAY,WACZjC,MAAOG,EACP+B,SAAUZ,KAAKf,gBAGnB,6BACA,2BAAOuB,UAAU,aAAjB,SAEE,6BACA,2BACEA,UAAU,YACVE,KAAK,OACL7B,KAAK,SACL8B,YAAY,mBACZjC,MAAOI,EACP8B,SAAUZ,KAAKf,gBAGnB,6BACA,4BAAQyB,KAAK,SAASF,UAAU,aAAhC,wB,GA9FgBK,cA4GpBC,EAAqB,CACzB3C,cAGa4C,eATS,SAAChC,GAAD,MAAY,CAClCQ,SAAUR,EAAMQ,SAASyB,MACzBC,OAAQlC,EAAMQ,SAAS0B,UAOeH,EAAzBC,CAA6CpC,GC3FtDmC,G,MAAqB,CACzBvC,iBAGawC,eARS,SAAChC,GAAD,MAAY,CAClCkC,OAAQlC,EAAMQ,SAAS0B,UAOeH,EAAzBC,EA3BA,SAAC,GAA8B,IAA5BE,EAA2B,EAA3BA,OAAQ1C,EAAmB,EAAnBA,aACxB,OACE,yBAAKiC,UAAU,aACb,2BAAOA,UAAU,cAAjB,wBAEE,6BACA,2BACEA,UAAU,aACVE,KAAK,OACL7B,KAAK,SACL8B,YAAY,eACZjC,MAAOuC,EACPL,SAAUrC,S,QCMduC,G,MAAqB,CACzBzC,kBAGa0C,cAAQ,KAAMD,EAAdC,EAtBO,SAAC,GAAgC,IAA9BtB,EAA6B,EAA7BA,QAASpB,EAAoB,EAApBA,cACxBQ,EAAqBY,EAArBZ,KAAMgB,EAAeJ,EAAfI,GAAIf,EAAWW,EAAXX,OAClB,OACE,wBAAI0B,UAAU,WACZ,4BAAK3B,GACL,2BAAIC,GACJ,4BACE0B,UAAU,SACVE,KAAK,SACLb,GAAIA,EACJU,QAAS,kBAAMlC,EAAcwB,KAJ/B,cCMSqB,G,MAZK,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBACrB,OACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,KAAKb,UAAU,eACvCW,EAAiBG,KAAI,SAAC7B,EAASI,GAAV,OACpB,kBAACI,EAAA,EAAD,CAAesB,IAAK1B,EAAIM,WAAW,WAAWC,QAAS,KACrD,kBAAC,EAAD,CAAeX,QAASA,WCD5B+B,G,kNACJzC,MAAQ,CACN0C,WAAW,G,EAqBbC,mBAAqB,WAAO,IAAD,EACI,EAAKpC,MAA1BC,EADiB,EACjBA,SAAU0B,EADO,EACPA,OAElB,OAAO1B,EAAS0B,QAAO,SAACxB,GAAD,OACrBA,EAAQZ,KAAK8C,cAAcC,SAASX,EAAOU,mB,kEArB7C3B,KAAKd,UAAS,SAACH,GAAD,MAAY,CACxB0C,WAAY1C,EAAM0C,cAGpB,IAAMI,EAAgBC,aAAaC,QAAQ,YACvCF,GACF7B,KAAKV,MAAMhB,eAAe0D,KAAKC,MAAMJ,M,yCAItBK,GAAY,IACrB3C,EAAaS,KAAKV,MAAlBC,SACJ2C,EAAU3C,WAAaA,GACzBuC,aAAaK,QAAQ,WAAYH,KAAKI,UAAU7C,M,+BAalD,OACE,yBAAKiB,UAAU,aACb,kBAACP,EAAA,EAAD,CACEC,IAAI,EACJmC,QAAQ,EACRlC,WAAW,gBACXC,QAAS,IACTC,eAAa,GAEb,wBAAIG,UAAU,YAAd,cAGF,kBAAC,EAAD,MAEgC,IAA/BR,KAAKV,MAAMC,SAAS+C,QACnB,oCACE,wBAAI9B,UAAU,gBAAd,YACA,mFAIJ,kBAACP,EAAA,EAAD,CACEC,GAAIF,KAAKV,MAAMC,SAAS+C,OAAS,EACjCnC,WAAW,kBACXC,QAAS,IACTC,eAAa,GAEb,kBAAC,EAAD,CAAQtB,MAAOiB,KAAKjB,MAAOR,aAAcyB,KAAKzB,gBAGhD,kBAAC,EAAD,CAAa4C,iBAAkBnB,KAAK0B,4B,GA9D1Bb,cAyEZC,EAAqB,CACzBxC,iBACAC,gBAGawC,eAVS,SAAChC,GAAD,MAAY,CAClCQ,SAAUR,EAAMQ,SAASyB,MACzBC,OAAQlC,EAAMQ,SAAS0B,UAQeH,EAAzBC,CAA6CS,G,OCrF7Ce,cAAc,GAAD,eACzBhE,GAAe,SAACQ,EAAD,YAAUP,Y,QCGb+D,cAAc,IAAD,mBACzBpE,GAAa,SAACY,EAAD,OAAUP,EAAV,EAAUA,QAAV,4BAA4BO,GAA5B,CAAmCP,OADvB,cAEzBH,GAAgB,SAACU,EAAD,OAAUP,EAAV,EAAUA,QAAV,OACfO,EAAMkC,QAAO,SAACxB,GAAD,OAAaA,EAAQI,KAAOrB,QAHjB,cAIzBF,GAAiB,SAACS,EAAD,YAAUP,WAJF,ICHbgE,cAAgB,CAC7BxB,QACAC,WCFIwB,EAAcD,YAAgB,CAClCjD,SAAUmD,IAQGC,EALDC,YAAe,CAC3BC,QAASJ,EACTK,UAAUC,I,MCHZC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,eAAe,W","file":"static/js/main.c9163e6a.chunk.js","sourcesContent":["import {\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  CONTAT_STORAGE,\n} from \"../constants/contactConstants\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\nexport const addContact = createAction(ADD_CONTACT);\nexport const deleteContact = createAction(DELETE_CONTACT);\nexport const contactStorage = createAction(CONTAT_STORAGE);\n\n// export const addContact = (singleContact) => ({\n//   type: ADD_CONTACT,\n//   payload: singleContact,\n// });\n\n// export const deleteContact = (id) => ({\n//   type: DELETE_CONTACT,\n//   payload: id,\n// });\n\n// export const contactStorage = (arr) => ({\n//   type: CONTAT_STORAGE,\n//   payload: arr,\n// });\n","export const ADD_CONTACT = \"@contacts/add\";\nexport const DELETE_CONTACT = \"@contact/delete\";\nexport const CONTAT_STORAGE = \"@contact/storage\";\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { QUERY_FILTER } from \"../constants/filterConstants\";\n\nexport const handleFilter = createAction(QUERY_FILTER, ({ target }) => ({\n  payload: target.value,\n}));\n\n// export const handleFilter = (e) => ({\n//   type: QUERY_FILTER,\n//   payload: e.target.value,\n// });\n","export const QUERY_FILTER = \"@filter/query\";\n","import React, { Component } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport { addContact } from \"../../redux/actions/contactAction\";\nimport PropTypes from \"prop-types\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./ContactForm.css\";\n\nclass ContactForm extends Component {\n  formInitialState = {\n    name: \"\",\n    number: \"\",\n  };\n\n  state = {\n    ...this.formInitialState,\n    alert: false,\n  };\n\n  inputHandler = ({ target }) => {\n    const { value, name } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  submitHandler = (e) => {\n    const { name, number, alert } = this.state;\n    e.preventDefault();\n\n    const { contacts } = this.props;\n    const isExists = contacts.find((contact) => contact.name === name);\n\n    if (isExists) {\n      this.toggleAlert(alert);\n      return this.reset();\n    }\n\n    const singleContact = {\n      name,\n      number,\n      id: uuidv4(),\n    };\n\n    this.props.addContact(singleContact);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ ...this.formInitialState });\n  };\n\n  toggleAlert = (status) => {\n    this.setState({ alert: !status });\n  };\n\n  render() {\n    const { name, number, alert } = this.state;\n    const alertDelay = () => this.setState({ alert: !alert });\n\n    return (\n      <>\n        <CSSTransition\n          in={alert}\n          classNames=\"Alert\"\n          timeout={1500}\n          unmountOnExit\n          onEntered={alertDelay}\n        >\n          <button\n            onClick={this.toggleAlert}\n            className=\"AlertBtn\"\n          >{`Contact already exists!`}</button>\n        </CSSTransition>\n        <form className=\"ContactsForm\" onSubmit={this.submitHandler}>\n          <label className=\"InputName\">\n            Name\n            <br />\n            <input\n              className=\"InputForm\"\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Add name\"\n              value={name}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <br />\n          <label className=\"InputName\">\n            Number\n            <br />\n            <input\n              className=\"InputForm\"\n              type=\"text\"\n              name=\"number\"\n              placeholder=\"Add phone number\"\n              value={number}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <br />\n          <button type=\"submit\" className=\"SubmitBtn\">\n            Create contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n  filter: state.contacts.filter,\n});\n\nconst mapDispatchToProps = {\n  addContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n      namber: PropTypes.string,\n    })\n  ).isRequired,\n  filter: PropTypes.string.isRequired,\n  addContact: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { handleFilter } from \"../../redux/actions/filterAction\";\nimport \"./Filter.css\";\n\nconst Filter = ({ filter, handleFilter }) => {\n  return (\n    <div className=\"FilterBox\">\n      <label className=\"InputLabel\">\n        Find contacts by name\n        <br />\n        <input\n          className=\"FilterForm\"\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Find contact\"\n          value={filter}\n          onChange={handleFilter}\n        />\n      </label>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  filter: state.contacts.filter,\n});\n\nconst mapDispatchToProps = {\n  handleFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.propTypes = {\n  state: PropTypes.shape({\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        id: PropTypes.string,\n        namber: PropTypes.string,\n      })\n    ),\n    filter: PropTypes.string,\n  }).isRequired,\n  handleFilter: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { deleteContact } from \"../../redux/actions/contactAction\";\nimport \"./SingleContact.css\";\n\nconst SingleContact = ({ contact, deleteContact }) => {\n  const { name, id, number } = contact;\n  return (\n    <li className=\"Contact\">\n      <h4>{name}</h4>\n      <p>{number}</p>\n      <button\n        className=\"DelBtn\"\n        type=\"button\"\n        id={id}\n        onClick={() => deleteContact(id)}\n      >\n        &#10008;\n      </button>\n    </li>\n  );\n};\n\nconst mapDispatchToProps = {\n  deleteContact,\n};\n\nexport default connect(null, mapDispatchToProps)(SingleContact);\n\nSingleContact.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.string,\n    namber: PropTypes.string,\n  }).isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\nimport SingleContact from \"../SingleContact/SingleContact\";\nimport \"./ContactList.css\";\n\nconst ContactList = ({ filteredContacts }) => {\n  return (\n    <TransitionGroup component=\"ul\" className=\"ContactList\">\n      {filteredContacts.map((contact, id) => (\n        <CSSTransition key={id} classNames=\"ListItem\" timeout={250}>\n          <SingleContact contact={contact} />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  filteredContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n      namber: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { contactStorage } from \"../../redux/actions/contactAction\";\nimport { handleFilter } from \"../../redux/actions/filterAction\";\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport Filter from \"../Filter/Filter\";\nimport ContactList from \"../ContactList/ContactList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    animation: false,\n  };\n\n  componentDidMount() {\n    this.setState((state) => ({\n      animation: !state.animation,\n    }));\n\n    const savedContacts = localStorage.getItem(\"contacts\");\n    if (savedContacts) {\n      this.props.contactStorage(JSON.parse(savedContacts));\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { contacts } = this.props;\n    if (prevProps.contacts !== contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n    }\n  }\n\n  getFilteredContact = () => {\n    const { contacts, filter } = this.props;\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"Container\">\n        <CSSTransition\n          in={true}\n          appear={true}\n          classNames=\"Title-slideIn\"\n          timeout={500}\n          unmountOnExit\n        >\n          <h1 className=\"AppTitle\">Phonebook</h1>\n        </CSSTransition>\n\n        <ContactForm />\n\n        {this.props.contacts.length === 0 && (\n          <>\n            <h2 className=\"ContactTitle\">Contacts</h2>\n            <p>Contacts list is empty. Please, create new cotnact!</p>\n          </>\n        )}\n\n        <CSSTransition\n          in={this.props.contacts.length > 1}\n          classNames=\"FilterAnimation\"\n          timeout={250}\n          unmountOnExit\n        >\n          <Filter state={this.state} handleFilter={this.handleFilter} />\n        </CSSTransition>\n\n        <ContactList filteredContacts={this.getFilteredContact()} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n  filter: state.contacts.filter,\n});\n\nconst mapDispatchToProps = {\n  contactStorage,\n  handleFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { handleFilter } from \"../actions/filterAction\";\n\nexport default createReducer(\"\", {\n  [handleFilter]: (state, { payload }) => (state = payload),\n});\n\n// import { QUERY_FILTER } from \"../constants/filterConstants\";\n\n// const initialeState = \"\";\n\n// export default (state = initialeState, { type, payload }) => {\n//   switch (type) {\n//     case QUERY_FILTER:\n//       return (state = payload);\n\n//     default:\n//       return state;\n//   }\n// };\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport {\n  addContact,\n  deleteContact,\n  contactStorage,\n} from \"../actions/contactAction\";\n\nexport default createReducer([], {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) =>\n    state.filter((contact) => contact.id !== payload),\n  [contactStorage]: (state, { payload }) => payload,\n});\n\n// import {\n//   ADD_CONTACT,\n//   DELETE_CONTACT,\n//   CONTAT_STORAGE,\n// } from \"../constants/contactConstants\";\n\n// const initialState = [];\n\n// export default (state = initialState, { type, payload }) => {\n//   switch (type) {\n//     case ADD_CONTACT:\n//       return [...state, payload];\n\n//     case DELETE_CONTACT:\n//       return state.filter((contact) => contact.id !== payload);\n\n//     case CONTAT_STORAGE:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n","import { combineReducers } from \"redux\";\nimport filter from \"./filterReducer\";\nimport items from \"./contactReducer\";\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport contactsReducer from \"./reducers\";\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: process.env.NODE_ENV !== \"production\",\n});\n\nexport default store;\n\n// import { createStore } from \"redux\";\n// import { combineReducers } from \"redux\";\n// import { composeWithDevTools } from \"redux-devtools-extension\";\n// import contactsReducer from \"./reducers\";\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\n// export default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App/App\";\nimport store from \"./redux/store\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}