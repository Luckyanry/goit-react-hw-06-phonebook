{"version":3,"sources":["redux/actions/contactAction.js","redux/constants/contactConstants.js","redux/reducers/contactReducer.js","redux/reducers/index.js","redux/store.js","components/ContactForm/ContactForm.js","components/SingleContact/SingleContact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App/App.js","index.js"],"names":["addContact","createAction","name","number","payload","id","uuidv4","deleteContact","contactStorage","handleFilter","target","value","items","createReducer","state","filter","contact","combineReducers","store","configureStore","reducer","contacts","rootReducer","devTools","process","ContactForm","formInitialState","alert","inputHandler","setState","submitHandler","e","preventDefault","props","find","toggleAlert","reset","status","this","CSSTransition","in","classNames","timeout","unmountOnExit","onEntered","onClick","className","onSubmit","type","placeholder","onChange","Component","mapDispatchToProps","connect","ownProps","dispatch","normalizedFilter","toLowerCase","includes","TransitionGroup","component","map","key","App","animation","savedContacts","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","appear","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06431915.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  CONTACT_STORAGE,\n  CONTACT_FILTER,\n} from \"../constants/contactConstants\";\n\nexport const addContact = createAction(ADD_CONTACT, (name, number) => ({\n  payload: {\n    id: uuidv4(),\n    name,\n    number,\n  },\n}));\nexport const deleteContact = createAction(DELETE_CONTACT);\nexport const contactStorage = createAction(CONTACT_STORAGE);\nexport const handleFilter = createAction(CONTACT_FILTER, ({ target }) => ({\n  payload: target.value,\n}));\n\n// export const addContact = (name, number) => ({\n//   type: ADD_CONTACT,\n//   payload: {\n//   id: uuidv4(),\n//   name,\n//   number,\n// },\n// });\n\n// export const deleteContact = (id) => ({\n//   type: DELETE_CONTACT,\n//   payload: id,\n// });\n\n// export const contactStorage = (arr) => ({\n//   type: CONTAT_STORAGE,\n//   payload: arr,\n// });\n\n// export const handleFilter = (e) => ({\n//   type: QUERY_FILTER,\n//   payload: e.target.value,\n// });\n","export const ADD_CONTACT = \"@contacts/add\";\nexport const DELETE_CONTACT = \"@contact/delete\";\nexport const CONTACT_STORAGE = \"@contact/storage\";\nexport const CONTACT_FILTER = \"@contact/filter\";\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport {\n  addContact,\n  deleteContact,\n  contactStorage,\n  handleFilter,\n} from \"../actions/contactAction\";\n\nconst removeContact = (state, { payload }) =>\n  state.filter((contact) => contact.id !== payload);\n\nexport const items = createReducer([], {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: removeContact,\n  [contactStorage]: (state, { payload }) => payload,\n});\n\nexport const filter = createReducer(\"\", {\n  [handleFilter]: (state, { payload }) => (state = payload),\n});\n\n// import {\n//   ADD_CONTACT,\n//   DELETE_CONTACT,\n//   CONTAT_STORAGE,\n//   CONTACT_FILTER;\n// } from \"../constants/contactConstants\";\n\n// export default (state = [], { type, payload }) => {\n//   switch (type) {\n//     case ADD_CONTACT:\n//       return [...state, payload];\n\n//     case DELETE_CONTACT:\n//       return state.filter((contact) => contact.id !== payload);\n\n//     case CONTAT_STORAGE:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\n// export default (state = \"\", { type, payload }) => {\n//   switch (type) {\n//     case CONTACT_FILTER:\n//       return (state = payload);\n\n//     default:\n//       return state;\n//   }\n// };\n","import { combineReducers } from \"redux\";\nimport { items, filter } from \"./contactReducer\";\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport rootReducer from \"./reducers\";\n\nconst store = configureStore({\n  reducer: { contacts: rootReducer },\n  devTools: process.env.NODE_ENV !== \"production\",\n});\n\nexport default store;\n\n// ======================================================\n\n// import { combineReducers } from \"redux\";\n// import filter from \"../redux/reducers/filterReducer\";\n// import items from \"../redux/reducers/contactReducer\";\n\n// const rootReducer = combineReducers({\n//   items,\n//   filter,\n// });\n\n// const store = configureStore({\n//   reducer: { contacts: rootReducer },\n//   devTools: process.env.NODE_ENV !== \"production\",\n// });\n\n// export default store;\n\n// =======================================================\n\n// import { createStore } from \"redux\";\n// import { combineReducers } from \"redux\";\n// import { composeWithDevTools } from \"redux-devtools-extension\";\n// import contactsReducer from \"./reducers\";\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\n// export default store;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\nimport { addContact } from \"../../redux/actions/contactAction\";\nimport \"./ContactForm.css\";\n\nclass ContactForm extends Component {\n  formInitialState = {\n    name: \"\",\n    number: \"\",\n  };\n\n  state = {\n    ...this.formInitialState,\n    alert: false,\n  };\n\n  inputHandler = ({ target }) => {\n    const { value, name } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  submitHandler = (e) => {\n    const { name, number, alert } = this.state;\n    e.preventDefault();\n\n    const { contacts } = this.props;\n    const isExists = contacts.find((contact) => contact.name === name);\n\n    if (isExists) {\n      this.toggleAlert(alert);\n      return this.reset();\n    }\n\n    this.props.addContact(name, number);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ ...this.formInitialState });\n  };\n\n  toggleAlert = (status) => {\n    this.setState({ alert: !status });\n  };\n\n  render() {\n    const { name, number, alert } = this.state;\n    const alertDelay = () => this.setState({ alert: !alert });\n\n    return (\n      <>\n        <CSSTransition\n          in={alert}\n          classNames=\"Alert\"\n          timeout={1500}\n          unmountOnExit\n          onEntered={alertDelay}\n        >\n          <button\n            onClick={this.toggleAlert}\n            className=\"AlertBtn\"\n          >{`Contact already exists!`}</button>\n        </CSSTransition>\n        <form className=\"ContactsForm\" onSubmit={this.submitHandler}>\n          <label className=\"InputName\">\n            Name\n            <br />\n            <input\n              className=\"InputForm\"\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Add name\"\n              value={name}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <br />\n          <label className=\"InputName\">\n            Number\n            <br />\n            <input\n              className=\"InputForm\"\n              type=\"text\"\n              name=\"number\"\n              placeholder=\"Add phone number\"\n              value={number}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <br />\n          <button type=\"submit\" className=\"SubmitBtn\">\n            Create contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n  filter: state.contacts.filter,\n});\n\nconst mapDispatchToProps = {\n  addContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n      namber: PropTypes.string,\n    })\n  ).isRequired,\n  filter: PropTypes.string.isRequired,\n  addContact: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { deleteContact } from \"../../redux/actions/contactAction\";\nimport \"./SingleContact.css\";\n\nconst SingleContact = ({ name, number, deleteContact }) => {\n  return (\n    <li className=\"Contact\">\n      <h4>{name}</h4>\n      <p>{number}</p>\n      <button className=\"DelBtn\" type=\"button\" onClick={deleteContact}>\n        &#10008;\n      </button>\n    </li>\n  );\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const contact = state.contacts.items.find(\n    (contact) => contact.id === ownProps.id\n  );\n\n  return { ...contact };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  deleteContact: () => dispatch(deleteContact(ownProps.id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleContact);\n\nSingleContact.propTypes = {\n  name: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  number: PropTypes.string,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\nimport SingleContact from \"../SingleContact/SingleContact\";\nimport \"./ContactList.css\";\n\nconst ContactList = ({ contacts }) => {\n  return (\n    <TransitionGroup component=\"ul\" className=\"ContactList\">\n      {contacts.map(({ id }) => (\n        <CSSTransition key={id} classNames=\"ListItem\" timeout={250}>\n          <SingleContact id={id} />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { items, filter } = state.contacts;\n  const normalizedFilter = filter.toLowerCase();\n\n  const getFilteredContact = items.filter((contact) =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  return {\n    contacts: getFilteredContact,\n  };\n};\n\nexport default connect(mapStateToProps)(ContactList);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n      namber: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { handleFilter } from \"../../redux/actions/contactAction\";\nimport \"./Filter.css\";\n\nconst Filter = ({ filter, handleFilter }) => {\n  return (\n    <div className=\"FilterBox\">\n      <label className=\"InputLabel\">\n        Find contacts by name\n        <br />\n        <input\n          className=\"FilterForm\"\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Find contact\"\n          value={filter}\n          onChange={handleFilter}\n        />\n      </label>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  filter: state.contacts.filter,\n});\n\nconst mapDispatchToProps = {\n  handleFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n      namber: PropTypes.string,\n    }).isRequired\n  ),\n  filter: PropTypes.string.isRequired,\n  handleFilter: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { contactStorage } from \"../../redux/actions/contactAction\";\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport ContactList from \"../ContactList/ContactList\";\nimport Filter from \"../Filter/Filter\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    animation: false,\n  };\n\n  componentDidMount() {\n    this.setState((state) => ({\n      animation: !state.animation,\n    }));\n\n    const savedContacts = localStorage.getItem(\"contacts\");\n    if (savedContacts) {\n      this.props.contactStorage(JSON.parse(savedContacts));\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { contacts } = this.props;\n    if (prevProps.contacts !== contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Container\">\n        <CSSTransition\n          in={true}\n          appear={true}\n          classNames=\"Title-slideIn\"\n          timeout={500}\n          unmountOnExit\n        >\n          <h1 className=\"AppTitle\">Phonebook</h1>\n        </CSSTransition>\n\n        <ContactForm />\n\n        {this.props.contacts.length === 0 && (\n          <>\n            <h2 className=\"ContactTitle\">Contacts</h2>\n            <p>Contacts list is empty. Please, create new cotnact!</p>\n          </>\n        )}\n\n        <CSSTransition\n          in={this.props.contacts.length > 1}\n          classNames=\"FilterAnimation\"\n          timeout={250}\n          unmountOnExit\n        >\n          <Filter />\n        </CSSTransition>\n\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n});\n\nconst mapDispatchToProps = {\n  contactStorage,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport App from \"./components/App/App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}